extends layout

block append head
	link(rel='stylesheet', href='/stylesheets/players_detail.css')
	link(rel='stylesheet', href='/stylesheets/players_detail_matches.css')
	title= matchTotals[0].matches.playerInfo.name + ' - Matches - VGwhole - Vainglory Stats'
block append header-primary
	div(class='header-content-medal')
		div(class='image-container image-container-medal')
			- var tier = matchTotals[0].matches.playerInfo.tier.toString()
			if tier == '0'
				img(class='medal-icon', src='/images/medals/1.png')
			else
				img(class='medal-icon', src='/images/medals/' + tier + '.png')
	div(class='header-content-title')
		h1 #{matchTotals[0].matches.playerInfo.name}
		small Matches
block content
	div(class='header-content-nav-container')
		div(class='header-content-nav')
			nav(class='header-nav-links')
				ul
					li(class='')
						a(href='/players/' + playerid) Overview
					li(class='active')
						a(href='') Matches
					li(class='')
						a(href='/players/' + playerid + '/heroes') Heroes	
	header Averages for all matches
	div(class='row')
		div(class='col-sm-6')
			div(class='chart section-container')
				section(class='player-spread')
					article
						canvas(id='playerSpread')
		div(class='col-sm-3')
			section
				article(class='kda-average')
					dl
						dt KDA Ratio
						dd #{matchTotals[0].avgKDA.toFixed(2)}
			section
				article
					dl
						dt Kills
						dd #{matchTotals[0].avgKills}
		div(class='col-sm-3')
			section
				article
					dl
						dt Deaths
						dd #{matchTotals[0].avgDeaths}
			section
				article
					dl
						dt Assists
						dd #{matchTotals[0].avgAssists}
	div(class='row')
		div(class='col-sm-6')
			section
				article
					dl
						dt GPM
						dd #{matchTotals[0].avgGPM.toFixed(0)}
			section
				article
					dl
						dt Most Common Role
						dd #{Object.keys(matchTotals[0].roleTotal).reduce(function(a,b){ return matchTotals[0].roleTotal[a] > matchTotals[0].roleTotal[b] ? a : b })}
		div(class='col-sm-6')
			div(class='chart section-container')
				section(class='role-spread')
					article
						canvas(id='roleSpread')
	div(class='row')
		div(class='col-sm-6')
			section(class='mode-spread')
				article
					canvas(id='modeSpread')
		div(class='col-sm-6')
			section
				article
					dl
						dt Most Common Mode
						dd #{Object.keys(matchTotals[0].modeTotal).reduce(function(a, b){ return matchTotals[0].modeTotal[a] > matchTotals[0].modeTotal[b] ? a : b })}
			section
				article
					dl
						dt Matches
						dd #{matchTotals[0].matches.playerInfo.totalPlayed}
	div(class='row')
		div(class='col-sm-6')
			section
				article
					dl
						dt Match Duration
						- var mind = matchTotals[0].avgDuration % (60 * 60)
						- var minutes= Math.floor(mind / 60)
						- var secd = mind % 60
						- var seconds = Math.ceil(secd)
						dd #{minutes}:#{seconds}
		div(class='col-sm-6')
			section
				article
					dl
						dt Win Rate
						dd #{matchTotals[0].matches.playerInfo.winRate.toFixed(2)}%
	div(class='inner-content')
		div(class='row')
			div(class='col-12')
				section
					article
						table(class='table-content')
							thead
								tr
									th(colspan='2') Hero
									th Role
									th Result
									th Mode
									th Duration
									th KDA
							tbody
								each match in matchTotals
									tr
										td(class='hero-icon')
											div(class='image-container image-container-hero image-container-hero-icon')
												a(href='/heroes/' + match.matches.heroInfo.participantHero.replace(/\*/g, '').toLowerCase())
													img(class='image-hero image-icon' src=match.matches.heroInfo.heroImage)
										td(class='cell-large hero-name')
											a(href='/matches/' + match.matches.matchInfo.matchId) #{match.matches.heroInfo.participantHero.replace(/\*/g, '')}
										td(class='cell-centered role') #{match.matches.participantStats.role}
										td
											if match.matches.participantStats.won == true
												a(class='won', href='/matches/' + match.matches.matchInfo.matchId) Won Match
											if match.matches.participantStats.won == false
												a(class='lost', href='/matches/' + match.matches.matchInfo.matchId) Lost Match
										td #{match.matches.matchInfo.matchMode}
										- var mind = match.matches.matchInfo.matchDuration % (60 * 60)
										- var minutes = Math.floor(mind / 60)
										- var secd = mind % 60
										- var seconds = Math.ceil(secd)
										td(class='cell-duration') #{minutes}:#{seconds}
										td #{match.matches.participantStats.participantKills}/#{match.matches.participantStats.participantDeaths}/#{match.matches.participantStats.participantAssists}
	script(src='/scripts/Chart.js')
	script.
		var category = ["Minion Kills", "Assists", "Deaths", "Kills", "Tower Kills"];
		var stats = [];
		var roles = [];
		var modes = [];

		!{chartData}.forEach(function(element) {
			stats.push((element.avgMinionKills)/10, element.avgAssists, element.avgDeaths, element.avgKills, (element.avgTowers)*2);
			roles.push(element.roleTotal.carry, element.roleTotal.jungler, element.roleTotal.captain);
			modes.push(element.modeTotal.aral, element.modeTotal.blitz, element.modeTotal.casual_3v3, element.modeTotal.ranked_3v3, element.modeTotal.casual_5v5, element.modeTotal.ranked_5v5);
		});
		var ctx = document.getElementById('playerSpread')
		var myRadarChart = new Chart(ctx, {
			type: 'radar',
			data: {
				labels: category,
				datasets: [{
					data: stats,
					borderColor: '#E0962D',
					backgroundColor: 'rgba(224,150,45,0.4)'
				}]
			},
			options: {
				legend: {
					display: false
				},
				scale: {
					ticks: {
						display: false,
					},
					pointLabels: {
						fontSize: 14,
						fontColor: '#c4c4c4'
					}
				}
			}
		});
		
		var xtx = document.getElementById('roleSpread')
		var myDonutChart = new Chart(xtx, {
			type: 'doughnut',
			data: {
				labels: ["Carry", "Jungler", "Captain"],
				datasets: [{
					data: roles,
					backgroundColor: ['rgb(255,99,132)', 'rgb(54,162,235)', 'rgb(255,205,86)']
				}],
			},
			options: {
				legend: {
					position: 'left'
				}
			}
		});
	
		var ztx = document.getElementById('modeSpread')
		var myBarChart = new Chart(ztx, {
			type: 'bar',
			data: {
				labels: ["Aral", "Blitz", "Casual 3v3", "Ranked 3v3", "Casual 5v5", "Ranked 5v5"],
				datasets: [{
					data: modes,
					backgroundColor: [
						'rgba(255, 99, 132, 0.2)',
						'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)',
						'rgba(75, 192, 192, 0.2)',
						'rgba(153, 102, 255, 0.2)',
						'rgba(255, 159, 64, 0.2)'
					],
					borderColor: [
						'rgba(255,99,132,1)',
						'rgba(54,162,235,1)',
						'rgba(255,206,86,1)',
						'rgba(75,192,192,1)',
						'rgba(153,102,255,1)',
						'rgba(255,159,64,1)'
					],
					borderWidth: 1
				}]
			},
			options: {
				legend: {
					display: false
				},
				scales: {
					pointLabels: {
						fontColor: '#c4c4c4'
					}
				}
			}
		});
